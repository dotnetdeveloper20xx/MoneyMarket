// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoneyMarket.Persistence.Context;

#nullable disable

namespace MoneyMarket.Persistence.Migrations.App
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250828111720_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MoneyMarket.Domain.Borrowers.BorrowerProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DisabledAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisabledReason")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NationalIdNumber")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("BorrowerProfiles", (string)null);
                });

            modelBuilder.Entity("MoneyMarket.Domain.Entities.Borrower", b =>
                {
                    b.Property<Guid>("BorrowerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalIncomeSources")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DisabledAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisabledReason")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EmployerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("GrossAnnualIncome")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LengthOfEmployment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalIdNumber")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BorrowerId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Borrowers_UserId");

                    b.ToTable("Borrowers", (string)null);
                });

            modelBuilder.Entity("MoneyMarket.Domain.Entities.Funding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdempotencyKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("LenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LoanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdempotencyKey")
                        .IsUnique()
                        .HasFilter("[IdempotencyKey] IS NOT NULL");

                    b.HasIndex("LenderId");

                    b.HasIndex("LoanId");

                    b.ToTable("Fundings");
                });

            modelBuilder.Entity("MoneyMarket.Domain.Entities.Lender", b =>
                {
                    b.Property<Guid>("LenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ComplianceStatement")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DisabledAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisabledReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LoansFundedCount")
                        .HasColumnType("int");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<decimal>("TotalFunded")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalProfit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LenderId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_Lenders_UserId");

                    b.ToTable("Lenders", (string)null);
                });

            modelBuilder.Entity("MoneyMarket.Domain.Entities.Loan", b =>
                {
                    b.Property<Guid>("LoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ApplicationDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ApprovedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("BorrowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreditScoreAtApplication")
                        .HasColumnType("int");

                    b.Property<decimal?>("DebtToIncomeRatio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Fees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("FundedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("LastModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RepaymentFrequency")
                        .HasColumnType("int");

                    b.Property<decimal>("RequestedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RiskGrade")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TermMonths")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalRepayableAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UnderwritingDecisionNotes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoanId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("MoneyMarket.Domain.Entities.RepaymentInstallment", b =>
                {
                    b.Property<Guid>("InstallmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DueDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("InterestAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<Guid>("LoanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PaidAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PrincipalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("InstallmentId");

                    b.HasIndex("LoanId");

                    b.ToTable("RepaymentInstallments");
                });

            modelBuilder.Entity("MoneyMarket.Domain.Lenders.LenderApplication", b =>
                {
                    b.Property<Guid>("LenderApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("LastModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LenderApplicationId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_LenderApplications_UserId");

                    b.ToTable("LenderApplications", (string)null);
                });

            modelBuilder.Entity("MoneyMarket.Domain.Lenders.LenderProduct", b =>
                {
                    b.Property<Guid>("LenderProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Instalments")
                        .HasColumnType("int");

                    b.Property<decimal>("InterestRate")
                        .HasPrecision(6, 4)
                        .HasColumnType("decimal(6,4)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastModifiedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("MaxAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TermMonths")
                        .HasColumnType("int");

                    b.Property<int>("TermType")
                        .HasColumnType("int");

                    b.HasKey("LenderProductId");

                    b.HasIndex("LenderId", "IsActive");

                    b.ToTable("LenderProducts");
                });

            modelBuilder.Entity("MoneyMarket.Domain.Lenders.LenderProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DisabledAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisabledReason")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LenderProfile");
                });

            modelBuilder.Entity("MoneyMarket.Persistence.Identity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("MoneyMarket.Persistence.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("MoneyMarket.Persistence.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MoneyMarket.Persistence.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MoneyMarket.Persistence.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("MoneyMarket.Persistence.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyMarket.Persistence.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MoneyMarket.Persistence.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoneyMarket.Domain.Borrowers.BorrowerProfile", b =>
                {
                    b.HasOne("MoneyMarket.Persistence.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_BorrowerProfiles_AspNetUsers_UserId");

                    b.OwnsOne("MoneyMarket.Domain.Borrowers.Address", "CurrentAddress", b1 =>
                        {
                            b1.Property<Guid>("BorrowerProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)");

                            b1.Property<string>("House")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)");

                            b1.HasKey("BorrowerProfileId");

                            b1.ToTable("BorrowerProfiles");

                            b1.WithOwner()
                                .HasForeignKey("BorrowerProfileId");
                        });

                    b.OwnsMany("MoneyMarket.Domain.Borrowers.AuditTrailEntry", "AuditTrail", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Action")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("nvarchar(64)");

                            b1.Property<Guid>("BorrowerProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int?>("NewStatus")
                                .HasColumnType("int");

                            b1.Property<DateTime>("OccurredAtUtc")
                                .HasColumnType("datetime2");

                            b1.Property<int?>("OldStatus")
                                .HasColumnType("int");

                            b1.Property<string>("PerformedBy")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<string>("Reason")
                                .HasMaxLength(2000)
                                .HasColumnType("nvarchar(2000)");

                            b1.HasKey("Id");

                            b1.HasIndex("BorrowerProfileId");

                            b1.ToTable("BorrowerProfileAuditTrail", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BorrowerProfileId");
                        });

                    b.OwnsMany("MoneyMarket.Domain.Borrowers.BorrowerDocument", "Documents", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("BorrowerProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FileName")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<string>("StoragePath")
                                .IsRequired()
                                .HasMaxLength(1024)
                                .HasColumnType("nvarchar(1024)");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.Property<DateTime>("UploadedAtUtc")
                                .HasColumnType("datetime2");

                            b1.HasKey("Id");

                            b1.HasIndex("BorrowerProfileId");

                            b1.ToTable("BorrowerProfileDocuments", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BorrowerProfileId");
                        });

                    b.OwnsOne("MoneyMarket.Domain.Borrowers.EmploymentInfo", "Employment", b1 =>
                        {
                            b1.Property<Guid>("BorrowerProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AdditionalIncomeSources")
                                .HasMaxLength(2000)
                                .HasColumnType("nvarchar(2000)");

                            b1.Property<string>("EmployerName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.Property<decimal>("GrossAnnualIncome")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<string>("JobTitle")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)");

                            b1.Property<string>("LengthOfEmployment")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("BorrowerProfileId");

                            b1.ToTable("BorrowerProfiles");

                            b1.WithOwner()
                                .HasForeignKey("BorrowerProfileId");
                        });

                    b.OwnsMany("MoneyMarket.Domain.Borrowers.ExistingDebt", "Debts", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<Guid>("BorrowerProfileId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("DebtType")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("LenderName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.HasKey("Id");

                            b1.HasIndex("BorrowerProfileId");

                            b1.ToTable("BorrowerProfileDebts", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BorrowerProfileId");
                        });

                    b.Navigation("AuditTrail");

                    b.Navigation("CurrentAddress")
                        .IsRequired();

                    b.Navigation("Debts");

                    b.Navigation("Documents");

                    b.Navigation("Employment");
                });

            modelBuilder.Entity("MoneyMarket.Domain.Entities.Borrower", b =>
                {
                    b.HasOne("MoneyMarket.Persistence.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Borrowers_AspNetUsers_UserId");

                    b.OwnsOne("MoneyMarket.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("BorrowerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)");

                            b1.Property<string>("House")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)");

                            b1.HasKey("BorrowerId");

                            b1.ToTable("Borrowers");

                            b1.WithOwner()
                                .HasForeignKey("BorrowerId");
                        });

                    b.OwnsMany("MoneyMarket.Domain.ValueObjects.Debt", "ExistingDebts", b1 =>
                        {
                            b1.Property<Guid>("BorrowerId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("LenderName")
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)");

                            b1.Property<string>("DebtType")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("BorrowerId", "LenderName", "DebtType");

                            b1.ToTable("BorrowerDebts", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BorrowerId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("ExistingDebts");
                });

            modelBuilder.Entity("MoneyMarket.Domain.Entities.Funding", b =>
                {
                    b.HasOne("MoneyMarket.Domain.Entities.Lender", "Lender")
                        .WithMany()
                        .HasForeignKey("LenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyMarket.Domain.Entities.Loan", "Loan")
                        .WithMany("Fundings")
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lender");

                    b.Navigation("Loan");
                });

            modelBuilder.Entity("MoneyMarket.Domain.Entities.Lender", b =>
                {
                    b.HasOne("MoneyMarket.Persistence.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Lenders_AspNetUsers_UserId");
                });

            modelBuilder.Entity("MoneyMarket.Domain.Entities.RepaymentInstallment", b =>
                {
                    b.HasOne("MoneyMarket.Domain.Entities.Loan", null)
                        .WithMany("RepaymentSchedule")
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoneyMarket.Domain.Lenders.LenderApplication", b =>
                {
                    b.HasOne("MoneyMarket.Persistence.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_LenderApplications_AspNetUsers_UserId");

                    b.OwnsOne("MoneyMarket.Domain.Lenders.BusinessRegistrationInfo", "BusinessRegistration", b1 =>
                        {
                            b1.Property<Guid>("LenderApplicationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("BusinessName")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)");

                            b1.Property<string>("ComplianceStatement")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LendingLicenses")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ProofOfIncorporationDocuments")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("RegistrationNumber")
                                .IsRequired()
                                .HasMaxLength(128)
                                .HasColumnType("nvarchar(128)");

                            b1.HasKey("LenderApplicationId");

                            b1.ToTable("LenderApplications");

                            b1.WithOwner()
                                .HasForeignKey("LenderApplicationId");
                        });

                    b.OwnsOne("MoneyMarket.Domain.Lenders.FinancialCapacityInfo", "FinancialCapacity", b1 =>
                        {
                            b1.Property<Guid>("LenderApplicationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CapitalReserveDocuments")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FundingSourceDescription")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FundingSourceType")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("LenderApplicationId");

                            b1.ToTable("LenderApplications");

                            b1.WithOwner()
                                .HasForeignKey("LenderApplicationId");
                        });

                    b.OwnsOne("MoneyMarket.Domain.Lenders.RiskManagementInfo", "RiskManagement", b1 =>
                        {
                            b1.Property<Guid>("LenderApplicationId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CommunicationPlan")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("DefaultHandlingStrategy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PaymentCollectionProcess")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PricingStrategy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("RiskAssessmentTools")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("UnderwritingPolicy")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("LenderApplicationId");

                            b1.ToTable("LenderApplications");

                            b1.WithOwner()
                                .HasForeignKey("LenderApplicationId");
                        });

                    b.Navigation("BusinessRegistration");

                    b.Navigation("FinancialCapacity");

                    b.Navigation("RiskManagement");
                });

            modelBuilder.Entity("MoneyMarket.Domain.Entities.Loan", b =>
                {
                    b.Navigation("Fundings");

                    b.Navigation("RepaymentSchedule");
                });
#pragma warning restore 612, 618
        }
    }
}
